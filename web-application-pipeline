pipeline {
    agent any
    stages { 
        stage('build') {
            steps {
                echo "Building web application ..."
                script{
                    sendNotification("build-stage", "success")
                }
            }
        }
        stage('deploy-staging-environment') {
            steps {
                script{
                    deployAndSendNotification("staging")
                }
            }
        }
        stage('test-staging-environment') {
            steps {
                script{
                    test("staging")
                    sendNotification("test-staging-deployment", "success")
                }
            }
        }
        stage('deploy-production-environment') {
            steps {
                script{
                    deployAndSendNotification("production")
                }
            }
        }
        stage('test-production-environment') {
            steps {
                script{
                    test("production")
                    sendNotification("test-production-deployment", "success")

                }
            }
        }
    }
}

def deploy(String env) {
    echo "Deployment to ${env} environment triggered ..."
}

def test(String env) {
    echo "Running tests on ${env} environment ..."
    // sh "docker pull acikinovs/mvn_tests:latest"
}

def sendNotification(String env, String status) {
    if (status == "success") {
        sh "bash send_notification.sh ${env} 0"
    } else {
        sh "bash send_notification.sh ${env} 1"
    }
}

def deployAndSendNotification(String env) {
    try {
        deploy(env)
    } catch (error) {
        sendNotification("${env}-deployment", "failure")
        error("Deployment to ${env} failed")
    } finally {
        sendNotification("${env}-deployment", "success")
    }
}