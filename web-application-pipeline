pipeline {
    agent any
    stages { 
        stage('build') {
            steps {
                echo "Building web application ..."
                script{
                    sendNotification("build-stage", "success")
                }
            }
        }
        stage('start-selenium-env') {
            steps {
                script {
                    startSelenium()
                    sendNotification("start-selenium-env", "success")

                }
            }
        }        
        stage('deploy-staging-env') {
            steps {
                script{
                    deploySendNotification("staging")
                }
            }
        }
        stage('test-staging-env') {
            parallel {
                stage('test-staging-chrome') {
                    steps {
                        script {
                            runTestsGetReport("staging-chrome")
                        }
                    }
                }
                stage('test-staging-firefox') {
                    steps {
                        script {
                            runTestsGetReport("staging-firefox")
                        }
                    }
                }
            }            
        }
        stage('deploy-production-env') {
            steps {
                script{
                    deploySendNotification("production")
                }
            }
        }
        stage('test-production-env') {
            parallel {
                stage('test-production-chrome') {
                    steps {
                        script {
                            runTestsGetReport("production-chrome")
                        }
                    }
                }
                stage('test-production-firefox') {
                    steps {
                        script {
                            runTestsGetReport("production-firefox")
                        }
                    }
                }
            }
        }
        stage('stop-selenium-env') {
            steps {
                script {
                    stopSelenium()
                    sendNotification("stop-selenium-env", "success")
                }
            }
        }
    }
}

def deploy(String env) {
    echo "Deployment to ${env} environment triggered ..."
}

def test(String env) {
    echo "Running tests on ${env} environment ..."
    sh "docker pull acikinovs/mvn_tests:latest"
}

def sendNotification(String env, String status) {
    if (status == "success") {
        sh "bash send_notification.sh ${env} 0"
    } else {
        sh "bash send_notification.sh ${env} 1"
    }
}

def deploySendNotification(String env) {
    try {
        deploy(env)
    } catch (error) {
        sendNotification("${env}-deployment", "failure")
        error("Deployment to ${env} failed")
    } finally {
        sendNotification("${env}-deployment", "success")
    }
}

def startSelenium() {
    sh "docker run -d -p 4442-4444:4442-4444 --net test-automation-setup --rm --name selenium-hub-node selenium/hub:latest"
    sh "docker run -d --rm --name chrome-node --net test-automation-setup -e SE_EVENT_BUS_HOST=selenium-hub-node -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-chrome:latest"
    sh "docker run -d --rm --name firefox-node --net test-automation-setup -e SE_EVENT_BUS_HOST=selenium-hub-node -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-firefox:latest"
}

def stopSelenium() {
    sh "docker rm -f selenium-hub-node"
    sh "docker rm -f chrome-node"
    sh "docker rm -f firefox-node"
}

def runTestsGetReport(String testingEnv) {
    test(testingEnv)
    try {
        sh "docker run -d -t --network=test-automation-setup --name mvn-tests-${testingEnv} acikinovs/mvn_tests:latest"
        sh "docker exec mvn-tests-${testingEnv} mvn clean test -Dbrowser=chrome -DgridURL=selenium-hub-node:4444"
        sh "docker exec mvn-tests-${testingEnv} mvn io.qameta.allure:allure-maven:report"
        sh "docker exec mvn-tests-${testingEnv} rm -rf test-output/*"
        sh "docker exec mvn-tests-${testingEnv} cp -R target/site/allure-maven-plugin test-output"
    } catch (error) {
        sendNotification("testing-${testingEnv}", "failure")
        error("Testing on ${testingEnv} environment failed")
    } finally {
        sendNotification("testing-${testingEnv}", "success")
        sh "docker cp mvn-tests-${testingEnv}:/test-output/allure-maven-plugin/index.html report-${testingEnv}.html"
        sh "docker rm -f mvn-tests-${testingEnv}"
        publishHTML(
            [
                allowMissing: false, 
                alwaysLinkToLastBuild: false,
                keepAll: false, 
                reportDir: '', 
                reportFiles: "report-${testingEnv}.html", 
                reportName: "Test report for ${testingEnv}",
                reportTitles: ''
            ]
        )
    }
}